(doc prn
)
(doc pr)
(type 1.0)
(doc read-string)
(empty? "")
(empty? " ")
(doc empty?)
(doc empty)
(set)
(doc set)
(empty set)
(hash-map 0 1)
(hash-map)
(repeatedly 4 hash-map)
(empty? "")
(empty? " ")
(read-string -1.2)
(read-string "-1.2")
(float? (read-string "-1.2"))
(double? (read-string "-1.2"))
(integer? (read-string "-1"))
(integer? (read-string "-1*2"))
(re-seq #"\W" "hello")
(re-seq #"\W" "hello,")
(re-seq #"\W" "hello,$")
(re-seq #"\W" "hello,$-")
(re-seq #"\W" "hello,$-.")
(read-string "1.2)
(read-string "1.2")
(integer? (read-string "1.2"))
(read-string "1.2a")
(float? nil)
(try (read-string "a") (catch Exception e))
(try (read-string "a") (catch Exception e nil))
(try (read-string "ab") (catch Exception e nil))
(try (read-string "1.2") (catch Exception e nil))
(float? (try (read-string "1.2") (catch Exception e nil)))
(float? (try (read-string "1.2a") (catch Exception e nil)))
(read-string "1.2a")
(read-string "1-1-1")
(try (read-string "1-1-1") (catch Exception e))
(try (read-string "1-1-1") (catch Exception e) "1")
(try (read-string "q") (catch Exception e) )
(try (read-string "1") (catch Exception e) )
(try (read-string "1.12e") (catch Exception e) )
(try (read-string "1.12e") (catch Exception e) 1)
(try (read-string "1.12e") (catch Exception e) (vector 1))
(try (read-string "a") (catch Exception e) (vector 1))
(try (read-string "a") (catch Exception e))
(type (try (read-string "a") (catch Exception e)))
(seq "")
(empty? "")
(read-string "1-1")
(read-string "1,1")
(read-string "1,1,1")
(read-string "1,1,1.2")
(doc read-string)
(float "1.1")
(int "1")
(:Int
(Integer. "1")
(Integer. "1.2")
(Long. "1.2")
(Double. "1.2")
(Double. "1-12")
(Long. "1-2")
(Long. "1-1")
(doc assert)
(assert false)
(Double. "1")
(Double. "1e3")
(Double. "1e-3")
(Double. "1E-3")
(into {} [[:a 1] [:b 2]])
(hash-map :a 1 :b 2)
(hash-map [:a 1])
(doc assoc)
